spring.application.name=ecodeli-backend

# Configuration de la base de données gérée par RailwayDatabaseConfig.java
spring.datasource.driver-class-name=org.postgresql.Driver
spring.sql.init.platform=postgresql

# Configuration du serveur (Railway utilise PORT par défaut)
server.port=${PORT:8080}

# Optionnel : pour afficher les requêtes SQL dans la console
spring.jpa.show-sql=${JPA_SHOW_SQL:false}

# Pour gérer la création ou mise à jour de schéma - créer les tables
spring.jpa.hibernate.ddl-auto=${JPA_HIBERNATE_DDL_AUTO:create-drop}

# Optimisations mémoire pour Railway
spring.jpa.defer-datasource-initialization=false
spring.jpa.open-in-view=false

# Configuration JPA optimisée pour faible mémoire
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# Configuration HikariCP optimisée
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:5}
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:2}
spring.datasource.hikari.connection-timeout=${SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT:20000}
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.leak-detection-threshold=60000

# Logs réduits pour économiser la mémoire
logging.level.org.springframework.boot.web.embedded.tomcat=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK:WARN}
logging.level.com.ecodeli.ecodeli_backend=INFO
logging.level.org.hibernate.SQL=${LOGGING_LEVEL_ORG_HIBERNATE_SQL:WARN}
logging.level.org.springframework=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK:WARN}
logging.level.com.zaxxer.hikari=${LOGGING_LEVEL_COM_ZAXXER_HIKARI:WARN}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Configuration Hibernate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Use exact names as specified in @Table annotations (preserve case)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Configuration Gmail SMTP
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=${MAIL_SMTP_AUTH:true}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_SMTP_STARTTLS:true}
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.protocols=TLSv1.2

# Clé secrète pour JWT (générer une clé par défaut pour dev)
jwt.secret=${JWT_SECRET:defaultJwtSecretKeyForDevelopmentPleaseChangeInProduction123456789}

# Configuration Stripe (clés par défaut vides)
stripe.publishable.key=${STRIPE_PUBLISHABLE_KEY:}
stripe.secret.key=${STRIPE_SECRET_KEY:}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET:}

# Configuration Upload de fichiers
app.upload.dir=uploads/justificatifs
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
